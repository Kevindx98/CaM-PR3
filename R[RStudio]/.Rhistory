I=iterpc(2,3, label = c(1,2))
library (iterpc)
install.packages(iterpc)
install.packages("iterpc")
I=iterpc(2,3,label=c(1,2))
library(iterpc)
I=iterpc(2,3,label=c(1,2))
getnext(I)
getnext(I)
getnext(I)
I=iterpc(2,3,label=c(1,2,3))
getnext(I)
getnext(I)
I=iterpc(2,3,label=c(1,2,1,2,2,1))
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
I=iterpc(2,3,label=c(1,2,1,2,2,1))
I=iterpc(2,3,label=c(1,2,1,2,2,1))
getnext(I)
getnext(I)
I=iterpc(2,3,label=c(1,2,1,2,2,1), order=F, replace=F)
I=iterpc(2,3,label=c(1,2,1,2,2,1), order=F, replace=F)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
I=iterpc(3,3,label=c(4,5,6), order=F, replace=F)
getnext(I)
getnext(I)
I=iterpc(3,3,label=c(4,5,6,7), order=F, replace=F)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
a = getnext(I)
a = getnext(I)
a = getnext(I)
a = getnext(I)
a = getnext(I)
I=iterpc(3,3,label=c(4,5,6,7), order=F, replace=F)
a = getnext(I)
a = getnext(I)
a = getnext(I)
a = getnext(I)
I=iterpc(3,3,label=c(4,5,6,7), order=F, replace=F)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
getnext(I)
version
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_básico.R')
install.packages("arrangements")
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_10_1.R')
setwd("~/Proyectos/CaM-PR3/R[RStudio]")
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_10_1.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_10_1.R')
#Mientras que lo que haya leído no sea un "-1"...
while(orillaA[1] != -1){
print("==========================================================================")
orillaB = c()
print(paste("Caso Número: ", archivo+1))
archivo=archivo+1
print("==========================================================================")
#Comprobación de parámetros que impedirían el éxito del algoritmo.
if((Numero_Canibales(orillaA) + Numero_Misioneros(orillaA)) %% 3 != 0){
print("ERROR: El número de personas no es múltiplo de 3.")
}else if(Numero_Canibales(orillaA) > Numero_Misioneros(orillaA)){
print("ERROR: Hay más caníbales que misioneros.")
}else{
flag = 1;
#Mientras siga habiendo personas en la orilla A...
while (length(orillaA) != 0) {
print(paste("Numero de Misioneros: ", Numero_Misioneros(orillaA)))
print(paste("Numero de Caníbales: ", Numero_Canibales(orillaA)))
print("ORILLA A -->")
print(orillaA)
print("ORILLA B -->")
print(orillaB)
#Se crea el iterador y se coge la primera combinación.
iter = icombinations(orillaA,3)
lista = iter$getnext()
sizeFlag = length(orillaA);
#Mientras que la combinación escogida no sea nula (Exista alguna combinación aún).
while (length(lista) != 0){
auxA <- orillaA
auxB <- orillaB
#Se crean dos vectores auxiliares que simulan el crecimiento y decrecimiento de las orillas con esa combinación.
for(i in 1:length(lista)){
auxA = auxA[-match(lista[i],auxA)]
auxB = append(auxB,lista[i])
}
#Si una serie de condiciones se cumplen, la combinación es válida.
if((Numero_Misioneros(lista) > Numero_Canibales(lista) || Numero_Misioneros(lista) == 0) &&
Numero_Misioneros(auxA) != 1 && (Numero_Canibales(auxA) <= Numero_Misioneros(auxA) || Numero_Misioneros(auxA) == 0) &&
Numero_Canibales(auxB) <= Numero_Misioneros(auxB)){
print("La combinación ganadora es: ")
print(lista)
#Se procede a llevarla a cabo en las orillas de verdad.
for (j in 1:length(lista)){
orillaA = orillaA[-match(lista[j],orillaA)]
orillaB = append(orillaB,lista[j])
}
#Se recoge la siguiente combinación y se sale del while más interno.
iter = icombinations(orillaA,3)
lista = iter$getnext
break
}
#En caso de no tener éxito, simplemente se recoge la siguiente combinación.
lista = iter$getnext()
}
#Si la longitud de la Orilla de A no ha cambiado con ninguna combinación, es que el problema no se puede
#resolver con la combinación de personas que hay en la Orilla de A.
if(length(orillaA) == sizeFlag){
print("############################################################################")
print("Combinación Imposible de Resolver")
print("############################################################################")
flag = 0
break
}
print("############################################################################")
}
#Si ha habido éxito, se imprimen los resultados
if (flag == 1){
print("El resultado final de la Orilla A es:")
print(orillaA)
print("El resultado final de la Orilla B es:")
print(orillaB)
}
}
#Se recoge el siguiente vector del fichero
orillaA = read.table("fichero_básico.txt", skip=archivo, nrow=1)
orillaA = as.numeric(orillaA)
}
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_básico.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_20_2.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_Tiempo_básico.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_Tiempo_500_50.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_Tiempo_Avanzado.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_Tiempo_Avanzado.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_básico.R')
setwd("~/Proyectos/CaM-PR3/R[RStudio]")
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_básico.R')
source('~/Proyectos/CaM-PR3/R[RStudio]/CyM_Tiempo_Avanzado.R')
